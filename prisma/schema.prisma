generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  email         String         @unique
  username      String         @unique
  mobile        String         @unique
  password      String
  books         Book[]         @relation("userBooks")
  notifications Notification[]
  rentals       Rental[]
  address       String
  state         String
  country       String
}

model Book {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  author      String
  description String
  coverImg    String
  genre       String
  owner       User     @relation("userBooks", fields: [ownerId], references: [id])
  ownerId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  address     String
  state       String
  country     String
  rental      Rental?  @relation("rentalBook")
  rentalId    String?  @db.ObjectId
}

enum NotificationType {
  RENTREQUEST
  RETURNOVERDUE
  ACCEPTEDREQUEST
  REJECTEDREQUEST
  BOOKRECEIVED
}


model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId    String           @db.ObjectId
  type      NotificationType
  createdAt DateTime         @default(now())
  info      Json?           
}

model Rental {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  durationOfRental Int
  returnDate       DateTime?
  renter           User      @relation(fields: [renterId], references: [id])
  renterId         String    @db.ObjectId
  createdAt        DateTime  @default(now())
  isOverdue        Boolean?
  isAccepted       Boolean?
  isFulfilled      Boolean?
  book             Book      @relation(name: "rentalBook", fields: [bookId], references: [id])
  bookId           String    @unique @db.ObjectId
}
