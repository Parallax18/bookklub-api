generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  email             String         @unique
  username          String         @unique
  mobile            String         @unique
  password          String
  books             Book[]         @relation("userBooks")
  notifications     Notification[]
  rentals           Rental[]
  address           String
  state             String
  country           String
  avatar String
  is_email_verified Boolean?
}

model Book {
  id          String   @id @default(uuid())
  title       String
  author      String
  description String
  coverImg    String
  genre       String
  owner       User     @relation("userBooks", fields: [ownerId], references: [id])
  ownerId     String   @default(uuid())
  createdAt   DateTime @default(now())
  address     String
  state       String
  country     String
  rentals     Rental[] @relation("bookRentals")
}

enum NotificationType {
  RENTREQUEST
  RETURNOVERDUE
  ACCEPTEDREQUEST
  REJECTEDREQUEST
  BOOKRECEIVED
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @default(uuid())
  type      NotificationType
  createdAt DateTime         @default(now())
  info      Json?
}

model Rental {
  id               String    @id @default(uuid())
  durationOfRental Int
  returnDate       DateTime?
  renter           User      @relation(fields: [renterId], references: [id])
  renterId         String    @default(uuid())
  createdAt        DateTime  @default(now())
  isOverdue        Boolean?
  isAccepted       Boolean?
  isFulfilled      Boolean?
  book             Book      @relation(name: "bookRentals", fields: [bookId], references: [id])
  bookId           String    @default(uuid())
}
